function get_materials(obj_data){
    let materials = {};
    let material_regex = "newmtl .*?endmtl";
    let __r = obj_data.replace(/\n/gim," \n ").toString();
 
    let matchs = __r.match(material_regex);
    console.log(matchs);
   /*
    for ( let match of match){
        let material = {};

    }*/

    return materials;
}

function get_vertices(obj_data){
    let vertices_regex = "v (.*?)\n";

    let fff = [...obj_data.matchAll(vertices_regex)];
    let vertices = [];

    for ( let vertice of fff ){
        let __v = [];
        for ( let coord of vertice[1].split(" ")){
            __v.push((parseFloat(coord) / 2.54).toFixed(4));
        }
        vertices.push(__v.join(" "));
    }

    return vertices;
}

function generate_wrl_model(model_3d) {
    let materials = get_materials(model_3d);
    let vertices = get_vertices(model_3d);

    let raw_wrl = '""#VRML V2.0 utf8\r\n';
    raw_wrl += '# 3D model generated by kicad_tools (https://github.com/remyar/easyeda2kicad.py)\r\n';
    raw_wrl += '""\r\n';

    let shapes = model_3d.split("usemtl").splice(1);
    for ( let shape of shapes){
        let lines = shape.replace("\r\n" , "\n").replace("\r","\n").split("\n").filter(r => r != undefined);
        let material = materials[lines[0].replace(" " , "")];
        let index_counter = 0;
        let link_dict = {};
        let coord_index = [];
        let points = [];

        console.log(lines);
    }
}


export class Exporter3dModelKicad {
    input = {};
    output = "";

    constructor(model_3d) {
        if (model_3d) {
            this.output = generate_wrl_model(model_3d);
        }
        else {
            this.output = undefined;
        }
    }
}